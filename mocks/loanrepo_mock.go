// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "loan_tracker_api/domain"

	mock "github.com/stretchr/testify/mock"
)

// LoanRepository is an autogenerated mock type for the LoanRepository type
type LoanRepository struct {
	mock.Mock
}

// ApplyForLoan provides a mock function with given fields: loan, userid
func (_m *LoanRepository) ApplyForLoan(loan *domain.Loan, userid string) error {
	ret := _m.Called(loan, userid)

	if len(ret) == 0 {
		panic("no return value specified for ApplyForLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Loan, string) error); ok {
		r0 = rf(loan, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveRejectLoan provides a mock function with given fields: loanID, status, userid
func (_m *LoanRepository) ApproveRejectLoan(loanID string, status string, userid string) error {
	ret := _m.Called(loanID, status, userid)

	if len(ret) == 0 {
		panic("no return value specified for ApproveRejectLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(loanID, status, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoan provides a mock function with given fields: loanID, userid
func (_m *LoanRepository) DeleteLoan(loanID string, userid string) error {
	ret := _m.Called(loanID, userid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(loanID, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoanDetails provides a mock function with given fields: loanID, userid
func (_m *LoanRepository) LoanDetails(loanID string, userid string) (domain.Loan, error) {
	ret := _m.Called(loanID, userid)

	if len(ret) == 0 {
		panic("no return value specified for LoanDetails")
	}

	var r0 domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.Loan, error)); ok {
		return rf(loanID, userid)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.Loan); ok {
		r0 = rf(loanID, userid)
	} else {
		r0 = ret.Get(0).(domain.Loan)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(loanID, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewAllLoans provides a mock function with given fields: pgnum, status, order
func (_m *LoanRepository) ViewAllLoans(pgnum int, status string, order string) ([]domain.Loan, int, error) {
	ret := _m.Called(pgnum, status, order)

	if len(ret) == 0 {
		panic("no return value specified for ViewAllLoans")
	}

	var r0 []domain.Loan
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string, string) ([]domain.Loan, int, error)); ok {
		return rf(pgnum, status, order)
	}
	if rf, ok := ret.Get(0).(func(int, string, string) []domain.Loan); ok {
		r0 = rf(pgnum, status, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, string) int); ok {
		r1 = rf(pgnum, status, order)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, string, string) error); ok {
		r2 = rf(pgnum, status, order)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ViewLogs provides a mock function with given fields:
func (_m *LoanRepository) ViewLogs() ([]domain.Log, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ViewLogs")
	}

	var r0 []domain.Log
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Log, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Log); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Log)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanRepository creates a new instance of LoanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanRepository {
	mock := &LoanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
