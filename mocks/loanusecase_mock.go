// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "loan_tracker_api/domain"

	mock "github.com/stretchr/testify/mock"
)

// LoanUsecase is an autogenerated mock type for the LoanUsecase type
type LoanUsecase struct {
	mock.Mock
}

// ApplyForLoan provides a mock function with given fields: c, loan, userid
func (_m *LoanUsecase) ApplyForLoan(c context.Context, loan *domain.Loan, userid string) error {
	ret := _m.Called(c, loan, userid)

	if len(ret) == 0 {
		panic("no return value specified for ApplyForLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Loan, string) error); ok {
		r0 = rf(c, loan, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveRejectLoan provides a mock function with given fields: c, loanID, status, userid
func (_m *LoanUsecase) ApproveRejectLoan(c context.Context, loanID string, status string, userid string) error {
	ret := _m.Called(c, loanID, status, userid)

	if len(ret) == 0 {
		panic("no return value specified for ApproveRejectLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(c, loanID, status, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLoan provides a mock function with given fields: c, loanID, userid
func (_m *LoanUsecase) DeleteLoan(c context.Context, loanID string, userid string) error {
	ret := _m.Called(c, loanID, userid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLoan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, loanID, userid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoanDetails provides a mock function with given fields: c, loanID, userid
func (_m *LoanUsecase) LoanDetails(c context.Context, loanID string, userid string) (domain.Loan, error) {
	ret := _m.Called(c, loanID, userid)

	if len(ret) == 0 {
		panic("no return value specified for LoanDetails")
	}

	var r0 domain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.Loan, error)); ok {
		return rf(c, loanID, userid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.Loan); ok {
		r0 = rf(c, loanID, userid)
	} else {
		r0 = ret.Get(0).(domain.Loan)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, loanID, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewAllLoans provides a mock function with given fields: c, pgnum, status, order
func (_m *LoanUsecase) ViewAllLoans(c context.Context, pgnum int, status string, order string) ([]domain.Loan, int, error) {
	ret := _m.Called(c, pgnum, status, order)

	if len(ret) == 0 {
		panic("no return value specified for ViewAllLoans")
	}

	var r0 []domain.Loan
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) ([]domain.Loan, int, error)); ok {
		return rf(c, pgnum, status, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) []domain.Loan); ok {
		r0 = rf(c, pgnum, status, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string) int); ok {
		r1 = rf(c, pgnum, status, order)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, string, string) error); ok {
		r2 = rf(c, pgnum, status, order)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ViewLogs provides a mock function with given fields: c
func (_m *LoanUsecase) ViewLogs(c context.Context) ([]domain.Log, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for ViewLogs")
	}

	var r0 []domain.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Log, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Log); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanUsecase creates a new instance of LoanUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanUsecase {
	mock := &LoanUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
